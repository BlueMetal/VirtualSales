// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Reactive.Linq;
using MonoTouch.UIKit;
using VirtualSales.Core.ViewModels;
using ReactiveUI;
using ReactiveUI.Cocoa;
using VirtualSales.Core;
using VirtualSales.Core.AppServices;
using System.Collections.Generic;
using VirtualSales.iOS.AppServices;

namespace VirtualSales.iOS
{
	public partial class ClientMeetingViewController : ReactiveViewController, IViewFor<ClientMeetingViewModel>
	{
        private ClientMeetingViewModel _viewModel;
        private readonly INavigationService _navigation;

		public ClientMeetingViewController (IntPtr handle) : base (handle)
		{
            _navigation = this.GetViewModelLocator().NavigationService;
        }

        public override void ViewDidLoad()
        {
            ViewModel = this.GetViewModel();

            this.Title = "Welcome to White Label Insurance";

            ViewModel.Meeting.Annotations
                .WhenAnyValue(p => p.Annotations)
                .ObserveOn(RxApp.MainThreadScheduler)
                .Subscribe(_ => UpdateClientAnnotations());

            ViewModel.Meeting.Annotations.SurfaceSize.Height = annotationView.Bounds.Height;
            ViewModel.Meeting.Annotations.SurfaceSize.Width = annotationView.Bounds.Width;

            annotationView.AnnotationViewModel = ViewModel.Meeting.Annotations;

            // Pass along meeting vm changes to the presentation controller
            var pres = ChildViewControllers.OfType<PresentationViewController>().First();
            var vc = ChildViewControllers.OfType<VideoConferenceViewController>().First();
            this.WhenAnyValue(vm => vm.ViewModel.Meeting)
                .Where(m => m != null)
                .Subscribe(m => { pres.ViewModel = m; vc.ViewModel = m.VideoConf; });

            // UGLY UGLY UGLY
            var services = (PlatformServices)this.GetViewModelLocator().GetService<IPlatformServices>();
            services.OriginView = this.View;

            NavigationItem.HidesBackButton = true;
            //var customButton = new UIBarButtonItem("Lobby",
            //    UIBarButtonItemStyle.Plain,
            //    (s, e) => _navigation.BackCommand.Execute(null));
            //NavigationItem.LeftBarButtonItem = customButton;
        }

	    public override void ViewDidAppear(bool animated)
	    {
	        base.ViewDidAppear(animated);
	        NavigationController.NavigationBarHidden = false;
	    }

	    public override void ViewWillDisappear(bool animated)
	    {
	        base.ViewWillDisappear(animated);
	        NavigationController.NavigationBarHidden = true;
	    }

	    private void UpdateClientAnnotations()
        {
            annotationView.Refresh();
        }

        object IViewFor.ViewModel
        {
            get { return ViewModel; }
            set { ViewModel = (ClientMeetingViewModel)value; }
        }

        public ClientMeetingViewModel ViewModel
        {
            get { return _viewModel; }
            set { RaiseAndSetIfChanged(ref _viewModel, value); }
        }

	}
}
