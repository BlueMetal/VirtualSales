// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Reactive.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using ReactiveUI;
using ReactiveUI.Cocoa;
using VirtualSales.Core;
using VirtualSales.Core.AppServices;
using VirtualSales.Core.ViewModels;
using VirtualSales.Core.ViewModels.Tools;

namespace VirtualSales.iOS
{
    public partial class PresentationViewController : ReactiveViewController, IViewFor<MeetingViewModel>
    {
        private MeetingViewModel _viewModel;

        public PresentationViewController(IntPtr handle) : base(handle)
        {

        }

        private IDisposable _nextDisp;
        private IDisposable _prevDisp;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var settings = this.GetViewModelLocator().GetService<ISettings>();

            if (settings.Mode == AppMode.Agent)
            {
                // HACK: This should work, but nested properties aren't currently supported.
                //this.BindCommand(ViewModel, vm => vm.ActiveTool.NextPageCommand, c => c.nextButton);
                //this.BindCommand(ViewModel, vm => vm.ActiveTool.PreviousPageCommand, c => c.prevButton);

                // Instead, we use these nasties to bind to the nested commands
                // Remove once nested props are supported in BindCommand
                this.WhenAnyValue(v => v.ViewModel.ActiveTool.NextPageCommand)
                    .Where(c => c != null)
                    .Subscribe(c =>
                               {
                                   if (_nextDisp != null)
                                       _nextDisp.Dispose();
                                   _nextDisp = c.BindToTarget(nextButton, UIControlEvent.TouchUpInside);
                               });

                this.WhenAnyValue(v => v.ViewModel.ActiveTool.PreviousPageCommand)
                    .Where(c => c != null)
                    .Subscribe(c =>
                               {
                                   if (_prevDisp != null)
                                       _prevDisp.Dispose();
                                   _prevDisp = c.BindToTarget(prevButton, UIControlEvent.TouchUpInside);
                               });
            }

            var nav = ChildViewControllers.OfType<ToolNavigationController>().First();
            
            this.WhenAnyValue(vm => vm.ViewModel.ActiveTool.CurrentPage)
                .Where(t => t != null)
                .Select(t => new { Controller = GetViewControllerForPage(t), ToolPage = t})
                .ObserveOn(RxApp.MainThreadScheduler)
                .Subscribe(c =>
                           {
                               // Set the view model
                               var vf = c.Controller as IViewFor;
                               if (vf != null)
                                   vf.ViewModel = c.ToolPage;

                               // utilize the navigation controller, but don't animate, it looks awkward
                               // if it is not animation the entire screen
                               nav.PopToRootViewController(false);
                               nav.PushViewController(c.Controller, false);
                           });

        }

        private UIViewController GetViewControllerForPage(IToolPage page)
        {
            var t = page.GetType();

            if (t == typeof(SampleToolViewModel.Page1)) return new SampleToolPage1ViewController();
            if (t == typeof(SampleToolViewModel.Page2)) return new SampleToolPage2ViewController();
            if (t == typeof(SampleToolViewModel.Page3)) return new SampleToolPage3ViewController();

            if (t == typeof(AnotherSampleToolViewModel.Page1)) return new AnotherSampleToolPage1ViewController();
            if (t == typeof(AnotherSampleToolViewModel.Page2)) return new AnotherSampleToolPage2ViewController();

            if (t == typeof(TypesOfInsuranceViewModel.Page1)) return new TypesOfInsuranceToolPage1ViewController();
            if (t == typeof(DividendInterestRatesViewModel.Page1)) return new DividendInterestRateToolPage1ViewController();

            if (t == typeof(LifetimeEconomicValueViewModel.Page1)) return new LifetimeEconomicValueToolPage1ViewController();
            if (t == typeof(LifetimeEconomicValueViewModel.Page2)) return new LifetimeEconomicValueToolPage2ViewController();

            if (t == typeof(BasicInformationToolViewModel.Page1)) return new BasicInformationToolPage1ViewController();
            if (t == typeof(BasicInformationToolViewModel.Page2)) return new BasicInformationToolPage2ViewController();
            if (t == typeof(BasicInformationToolViewModel.Page3)) return new BasicInformationToolPage3ViewController();

            throw new InvalidOperationException("Unknown page type");
        }

        object IViewFor.ViewModel
        {
            get { return ViewModel; }
            set { ViewModel = (MeetingViewModel)value; }
        }

        public MeetingViewModel ViewModel
        {
            get { return _viewModel; }
            set { this.RaiseAndSetIfChanged(ref _viewModel, value); }
        }
    }
}