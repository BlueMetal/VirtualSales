// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Linq;
using System.Threading.Tasks;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using ReactiveUI;
using ReactiveUI.Cocoa;
using VirtualSales.Core.ViewModels;

namespace VirtualSales.iOS
{
    public partial class LoginViewController : ReactiveViewController, IViewFor<LoginViewModel>
    {
     
        private LoginViewModel _viewModel;

        public LoginViewController(IntPtr handle) : base(handle)
        {
            ViewModel = this.GetViewModel();
        }

        object IViewFor.ViewModel
        {
            get { return ViewModel; }
            set { ViewModel = (LoginViewModel)value; }
        }

        public LoginViewModel ViewModel
        {
            get { return _viewModel; }
            set { RaiseAndSetIfChanged(ref _viewModel, value); }
        }

        private bool keyboardIsShown = false;
        private UIScrollView scroller;
        private NSObject _willhideobserver, _willshowobserver;

        public override void ViewDidLoad()
        {
            Title = "Log Out";
            NavigationController.NavigationBarHidden = true;

            this.Bind(ViewModel, vm => vm.Username, c => c.emailAddressTextField.Text);
            this.Bind(ViewModel, vm => vm.Password, c => c.passwordTextField.Text);
            this.BindCommand(ViewModel, vm => vm.LoginCommand, c => c.loginButton);

            scroller = new UIScrollView(View.Frame);
            var temp = this.View;
            this.View = scroller;
            scroller.BackgroundColor = UIColor.White;
            scroller.AddSubview(temp);
            scroller.Bounces = false;
            scroller.ContentSize = new System.Drawing.SizeF(temp.Frame.Size.Height, temp.Frame.Size.Width + 200);
            scroller.ScrollEnabled = false;
        }
        private void KeyboardWillHide(NSNotification n)
        {
            NSDictionary userInfo = n.UserInfo;
            NSValue val = (NSValue)userInfo[UIKeyboard.FrameBeginUserInfoKey];
            var rect = val.RectangleFValue;
            var keyboardSize = rect.Size;

            scroller.SetContentOffset(new System.Drawing.PointF(0, 0), true);
            //var frame = scroller.Frame;
            //frame.Height += keyboardSize.Height;

            //UIView.BeginAnimations(null);
            //UIView.SetAnimationBeginsFromCurrentState(true);
            //UIView.SetAnimationDuration(0.3);
            //scroller.Frame = frame;
            //UIView.CommitAnimations();
            keyboardIsShown = false;
        }
        private void KeyboardWillShow(NSNotification n)
        {
            if (keyboardIsShown) return;
            NSDictionary userInfo = n.UserInfo;
            NSValue val = (NSValue)userInfo[UIKeyboard.FrameBeginUserInfoKey];
            var rect = val.RectangleFValue;
            var keyboardSize = rect.Size;

            scroller.SetContentOffset(new System.Drawing.PointF(0, 75), true); // use width since we're in landspace mode

            //var frame = scroller.Frame;
            //frame.Height -= keyboardSize.Height;

            //UIView.BeginAnimations(null);
            //UIView.SetAnimationBeginsFromCurrentState(true);
            //UIView.SetAnimationDuration(0.3);
            //scroller.Frame = frame;
            //UIView.CommitAnimations();
            keyboardIsShown = true;
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            this.NavigationController.NavigationBarHidden = true;
        }
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            _willshowobserver = NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.WillShowNotification, KeyboardWillShow);
            _willhideobserver = NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.WillHideNotification, KeyboardWillHide);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
            NSNotificationCenter.DefaultCenter.RemoveObserver(_willshowobserver);
            NSNotificationCenter.DefaultCenter.RemoveObserver(_willhideobserver);
        }
    }
}