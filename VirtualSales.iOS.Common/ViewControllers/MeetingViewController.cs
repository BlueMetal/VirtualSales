// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive.Linq;
using MonoTouch.UIKit;
using ReactiveUI;
using ReactiveUI.Cocoa;
using VirtualSales.Core;
using VirtualSales.Core.AppServices;
using VirtualSales.Core.ViewModels;
using VirtualSales.Core.ViewModels.Annotations;
using VirtualSales.Core.ViewModels.Tools;
using VirtualSales.iOS.AppServices;
using VirtualSales.iOS.ViewControllers;

namespace VirtualSales.iOS
{
    public partial class MeetingViewController : ReactiveViewController, IViewFor<AgentMeetingViewModel>
    {
        private INavigationService _navigation;
        private AgentMeetingViewModel _viewModel;

        public MeetingViewController(IntPtr handle) : base(handle)
        {
            ViewModel = this.GetViewModel();
            _navigation = this.GetViewModelLocator().NavigationService;
        }

        object IViewFor.ViewModel
        {
            get { return ViewModel; }
            set { ViewModel = (AgentMeetingViewModel)value; }
        }

        public AgentMeetingViewModel ViewModel
        {
            get { return _viewModel; }
            set { RaiseAndSetIfChanged(ref _viewModel, value); }
        }

        public override void ViewDidLoad()
        {
            this.Bind(ViewModel, vm => vm.MeetingStatus, c => c.Title);

            this.BindCommand(ViewModel, vm => vm.StartMeetingCommand, c => c.startMeetingButton);
            this.BindCommand(ViewModel, vm => vm.EndMeetingCommand, c => c.endMeetingButton);
            this.BindCommand(ViewModel, vm => vm.SavePdfCommand, c => c.createMeetingPDFButton);

            NavigationItem.HidesBackButton = true;
            var customButton = new UIBarButtonItem(
                UIImage.FromFile("MenuIcon.png"),
                UIBarButtonItemStyle.Plain,
                (s, e) =>
                {
                    var vd = ((WhiteBrandAppDelegate)UIApplication.SharedApplication.Delegate).ViewDeckController;
                    if (vd.LeftControllerIsOpen)
                    {
                        vd.CloseLeftView(true);
                    }
                    else
                    {
                        vd.OpenLeftView(true);
                    }
                });
            NavigationItem.LeftBarButtonItem = customButton;


            // makes sure the tool box is on top, did not do this in storyboard
            // becuase it would hide all of the other content
            View.BringSubviewToFront(toolboxView);

            // Wire up annotations
            var agentAnnotations = (AgentAnnotationViewModel)ViewModel.Meeting.Annotations;

            var annotationToolsVC = ChildViewControllers.OfType<AnnotationsToolViewController>().First();
            annotationToolsVC.ViewModel = agentAnnotations.AnnotationTools;

            var availablesToolsContainerVC = ChildViewControllers.OfType<AvailableToolsContainerViewController>().First();
            var availableToolsVC = availablesToolsContainerVC.ChildViewControllers.OfType<AvailableToolsViewController>().First();
            var selectedToolsVC = ChildViewControllers.OfType<SelectedToolsViewController>().First();
            InitializeToolsControllers(ViewModel, availablesToolsContainerVC, availableToolsVC, selectedToolsVC);

            ViewModel.Meeting.Annotations.SurfaceSize.Height = presentationView.Bounds.Height; // inverted because of landscape mode
            ViewModel.Meeting.Annotations.SurfaceSize.Width = presentationView.Bounds.Width; // inverted because of landscape mode

            annotationView.AnnotationViewModel = ViewModel.Meeting.Annotations;

            // Pass along meeting vm changes to the presentation controller
            var pres = ChildViewControllers.OfType<PresentationViewController>().First();
            var vc = ChildViewControllers.OfType<VideoConferenceViewController>().First();
            this.WhenAnyValue(vm => vm.ViewModel.Meeting)
                .Where(m => m != null)
                .Subscribe(m =>
                           {
                               pres.ViewModel = m;
                               vc.ViewModel = m.VideoConf;
                           });


            // UGLY UGLY UGLY
            var services = (PlatformServices)this.GetViewModelLocator().GetService<IPlatformServices>();
            services.OriginView = View;

            //var toolsController = ChildViewControllers.OfType<MeetingSlidesViewController>().First();
            //this.WhenAnyValue(vm => vm.ViewModel.Meeting)
            //    .Where(m => m != null)
            //    .Subscribe(m => toolsController.ViewModel = m);
        }

        private void InitializeToolsControllers(AgentMeetingViewModel agentMeeting, AvailableToolsContainerViewController container, AvailableToolsViewController availableToolsVC, SelectedToolsViewController selectedToolsVC)
        {
            var selectedTools = new ReactiveList<IToolViewModel>();
            var availableTools = new ReactiveList<IToolViewModel>(agentMeeting.Meeting.Tools);

            availableToolsVC.DraggableLayout.DragSurface = View;
            availableToolsVC.DraggableLayout.Target = selectedToolsVC.DraggableLayout;
            availableToolsVC.AvailableTools = availableTools;
            availableToolsVC.SelectedTools = selectedTools;

            toolboxView.Alpha = 0.0f;

            selectedToolsVC.ViewModel = new SelectedToolsViewController.SelectedToolViewModel(toolboxView, container, agentMeeting.Meeting, selectedTools, agentMeeting.NavigationPane);
        }
    }
}