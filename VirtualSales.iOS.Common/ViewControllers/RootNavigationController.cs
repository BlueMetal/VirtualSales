// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reactive.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using ReactiveUI;
using VirtualSales.Core;
using VirtualSales.Core.AppServices;

namespace VirtualSales.iOS
{
	public partial class RootNavigationController : UINavigationController
	{
        private INavigationService _navigation;
        private IDisposable _navBackSub;
        private IDisposable _navSub;

        private readonly Dictionary<Screen, string> _screenToSegue = 
            new Dictionary<Screen, string>
        {
            {Screen.MeetingList, "userLoggedIn"},
            {Screen.AgentMeeting ,"EnterMeeting"},
            {Screen.ClientMeeting ,"EnterMeeting"},
            {Screen.Lobby ,""},
            {Screen.Login ,""},
        };

		public RootNavigationController (IntPtr handle) : base (handle)
		{
            _navigation = ((WhiteBrandAppDelegate)UIApplication.SharedApplication.Delegate).ViewModelLocator.NavigationService;


            _navBackSub = _navigation.CurrentScreen
                .Where(t => t.Item3 == NavigateDirection.Back)
                .ObserveOn(RxApp.MainThreadScheduler)
                .Subscribe(t => PopViewControllerAnimated(true));

            _navSub = _navigation.CurrentScreen
                .Where(t => t.Item3 == NavigateDirection.Forward)
                .ObserveOn(RxApp.MainThreadScheduler)
                .Subscribe(t => OnNavigateToScreen(t.Item1));
		}

	    private void OnNavigateToScreen(Screen screen)
	    {
            var segueId = _screenToSegue[screen];

	        if (string.IsNullOrWhiteSpace(segueId))
	        {
	            // Go back to the root; ignore for now
	        }
	        else
	        {
                VisibleViewController.PerformSegue(segueId, VisibleViewController); 
	        }
	    }
	    
	}
}
