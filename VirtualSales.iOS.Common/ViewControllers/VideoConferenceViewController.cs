// This file has been autogenerated from a class added in the UI designer.

using System.Security.Cryptography;
using System.Text;
using System.Threading;
//using ADL;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using ReactiveUI;
using ReactiveUI.Cocoa;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Reactive.Linq;
using VirtualSales.Core.ViewModels;
using VirtualSales.iOS.ViewControllers;
using VirtualSales.Models;

namespace VirtualSales.iOS
{
    public partial class VideoConferenceViewController : ReactiveViewController, IViewFor<VideoConfViewModel>
    {
        /**********************************************************
         * This code is quite messy and is in need of refactoring. For now, it is what it is but should 
         * refactored to use a nib + some other stuff.
         **********************************************************/

        #region Constructors

        public VideoConferenceViewController(IntPtr handle) : base(handle)
        {
        }

        #endregion

        //#region Fields

        //private string _scopeId;
        //private bool _connected = false;
        //private NSArray[] _cameraDevices;
        //private ALVideoView _localVideoView;
        //private static readonly DateTime Jan1st1970 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        //private ADLServiceListener _listener;
        //private ALVideoView _remoteVideoView;
        //private ALService _service;
        //private Dictionary<string, ALVideoView> _videoSinksToViews;
        private VideoConfViewModel _viewModel;
        //private VideoChatConfiguration _currentConfig;
        //private UIButton _reverseCameraButton;
        //private int _currentDevice;

        //#endregion

       // #region Methods

        //#region AddLive Exports

        //[Export("onConnect:")]
        //public void onConnect(ALError error)
        //{
        //    // this is done for stability purposes, though should be fixed and made more transparent
        //    System.Threading.Tasks.Task.Delay(2000).ContinueWith(p => ViewModel.VideoInitCompleted = true); 
            
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onConnect:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.connect failed: {0}", error.ToString());
        //        return;
        //    }
        //    _connected = true;
        //}

        //[Export("onGetVersion:version:")]
        //public void onGetVersion(ALError error, string version)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onGetVersion:version:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onGetVersion:version: failed: {0}", error.ToString());
        //        return;
        //    }
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onGetVersion:version: {0}", version);
        //}

        //[Export("onInitAddServiceListener:")]
        //public void onInitAddServiceListener(ALError error)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onInitAddServiceListener:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onInitAddServiceListener: failed: {0}", error.ToString());
        //        return;
        //    }
        //    _service.GetVideoCaptureDeviceNames(new ALResponder(new MonoTouch.ObjCRuntime.Selector("onInitGetVideoCaptureDeviceNames:devices:"), this));
        //}

        //[Export("onInitGetVideoCaptureDeviceNames:devices:")]
        //public void onInitGetVideoCaptureDeviceNames(ALError error, NSArray[] devices)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onInitGetVideoCaptureDeviceNames:devices:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onInitGetVideoCaptureDeviceNames:devices: failed: {0}", error.ToString());
        //        return;
        //    }

        //    _cameraDevices = devices;
        //    _currentDevice = 0;
        //    for (int i = 0; i < _cameraDevices.Length; i++)
        //    {
        //        var device = (ALDevice)_cameraDevices.GetValue(i);
        //        System.Diagnostics.Debug.WriteLine(device.Id + " - " + device.Label + " - " + device.Description);
        //    }
        //    var cameraDevice = (ALDevice)_cameraDevices.GetValue(_currentDevice);
        //    _service.SetVideoCaptureDevice(cameraDevice.Id,
        //                                   new ALResponder(new MonoTouch.ObjCRuntime.Selector("onSetVideoCaptureDevice:"), this));
        //    _service.StartLocalVideo(new ALResponder(new MonoTouch.ObjCRuntime.Selector("onStartLocalVideo:videoSinkId:"), this));

        //    _reverseCameraButton.Hidden = _cameraDevices.Length <= 1;
        //}

        //[Export("onInitPlatform:")]
        //public void onInitPlatform(ALError error)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onInitPlatform:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onInitPlatform: failed: {0}", error.ToString());
        //        return;
        //    }

        //    _service.GetVersion(new ALResponder(new MonoTouch.ObjCRuntime.Selector("onGetVersion:version:"), this));

        //    _localVideoView.Service = _service;
        //    _localVideoView.Mirror = true;
        //    _remoteVideoView.Service = _service;
        //    _remoteVideoView.Mirror = false;

        //    _listener = new ADLServiceListener();
        //    _listener.ViewController = this;
        //    _service.AddServiceListener(_listener,
        //                                new ALResponder(new MonoTouch.ObjCRuntime.Selector("onInitAddServiceListener:"), this));
        //}

        //[Export("onSetVideoCaptureDevice:")]
        //public void onSetVideoCaptureDevice(ALError error)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onSetVideoCaptureDevice:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine(String.Format("VideoConferenceViewController.onSetVideoCaptureDevice: failed: {0}", error.ToString()));
        //        return;
        //    }
        //}

        //[Export("onDisconnect:")]
        //public void onDisconnect(ALError error)
        //{
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onDisconnect: ERROR\n" + error.Err_code + " | " + error.Err_message);
        //    }
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onDisconnect:");
        //}

        //[Export("onStopLocalVideo:")]
        //public void onStopLocalVideo(ALError error)
        //{
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onStopLocalVideo: ERROR\n" + error.Err_code + " | " + error.Err_message);
        //    }
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onStopLocalVideo:");
        //}


        //[Export("onRestartLocalVideo:videoSinkId:")]
        //public void onRestartLocalVideo(ALError error, NSString videoSinkId)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onRestartLocalVideo:videoSinkId:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onRestartLocalVideo:videoSinkId: failed: {0}", error.ToString());
        //        return;
        //    }
        //    if (_videoSinksToViews == null) return;

        //    string sinkId = videoSinkId;
        //    _videoSinksToViews[sinkId] = _localVideoView;
        //    _localVideoView.AddRenderer(sinkId);
        //}

        //[Export("onStartLocalVideo:videoSinkId:")]
        //public void onStartLocalVideo(ALError error, NSString videoSinkId)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onStartLocalVideo:videoSinkId:");
        //    if (error != null)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onStartLocalVideo:videoSinkId: failed: {0}", error.ToString());
        //        return;
        //    }
        //    if (_videoSinksToViews == null) return;

        //    string sinkId = videoSinkId;
        //    _videoSinksToViews[sinkId] = _localVideoView;
        //    _localVideoView.AddRenderer(sinkId);

        //    if (_connected)
        //    {
        //        System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onStartLocalVideo:videoSinkId: already connected!");
        //        return;
        //    }
        //    var desc = new ALConnectionDescriptor();
        //    desc.ScopeId = ViewModel.Config.ScopeId;
        //    desc.AutopublishAudio = true;
        //    desc.AutopublishVideo = true;
        //    desc.Url = "174.127.76.172:443/" + ViewModel.Config.ScopeId;
        //    desc.VideoStream.MaxWidth = 150;
        //    desc.VideoStream.MaxHeight = 150;
        //    desc.VideoStream.MaxBitRate = 512;
        //    desc.VideoStream.MaxFps = 15;


        //    desc.AuthDetails.UserId = ViewModel.UserId;
        //    desc.AuthDetails.Expires = ViewModel.Config.Expires;
        //    desc.AuthDetails.Salt = ViewModel.Config.Salt;
        //    //System.Diagnostics.Debug.WriteLine(string.Format("Creating signature with [AppId = {0}] [Scope = {1}] [UserId = {2}] [Salt = {3}] [Expires = {4}] [ApiKey = {5}]",
        //    //    ViewModel.Config.AppId, desc.ScopeId,
        //    //    desc.AuthDetails.UserId,
        //    //    ViewModel.Config.Salt,
        //    //    desc.AuthDetails.Expires,
        //    //    ViewModel.Config.ApiKey));


        //    //var signatureBody = "" + ViewModel.Config.AppId + ViewModel.Config.ScopeId + desc.AuthDetails.UserId +
        //    //        ViewModel.Config.Salt + ViewModel.Config.Expires + ViewModel.Config.ApiKey;
        //    //var enc = new ASCIIEncoding();
        //    //var sigBodyBinary = enc.GetBytes(signatureBody);
        //    //var hasher = SHA256Managed.Create();
        //    //var sigBinary = hasher.ComputeHash(sigBodyBinary);
        //    //var manualSignature = BitConverter.ToString(sigBinary).Replace("-", "");
            
        //    //var apiSignature = ALAuthDetails.SignDetails(ViewModel.Config.AppId,
        //    //    desc.ScopeId,
        //    //    desc.AuthDetails.UserId,
        //    //    ViewModel.Config.Salt,
        //    //    desc.AuthDetails.Expires,
        //    //    ViewModel.Config.ApiKey);

        //    //System.Diagnostics.Debug.WriteLine("Manual signature: [" + manualSignature + "]\nAPI Signature: [" + apiSignature + "]");

        //    //desc.AuthDetails.Signature = manualSignature;
        //    _service.Connect(desc, new ALResponder(new MonoTouch.ObjCRuntime.Selector("onConnect:"), this));
        //}

        //#endregion

        //public void ConnectionLost(ALConnectionLostEvent evt) {
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.ConnectionLost");

        //    if (evt == null) return;
        //}
        //public static long CurrentTimeMillis()
        //{
        //    return (long)(DateTime.UtcNow - Jan1st1970).TotalMilliseconds;
        //}
        //public void MediaConnTypeChanged(ALMediaConnTypeChangedEvent evt)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.MediaConnTypeChanged");

        //    if (evt == null) return;
        //}
        //public void MediaStream(ALUserStateChangedEvent evt) {
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.MediaStream");

        //    if (evt == null) return;
        //}

        //private void Disconnect()
        //{
        //    if (_service == null) return;

        //    try
        //    {
        //        //    _localVideoView.RemoveRenderer();
        //        //_remoteVideoView.RemoveRenderer();
        //        _videoSinksToViews.Clear();

        //        _remoteVideoView.Release();
        //        _localVideoView.Release();

        //        _service.StopLocalVideo(new ALResponder(new MonoTouch.ObjCRuntime.Selector("onStopLocalVideo:"), this));
        //        _service.Disconnect(_scopeId, new ALResponder(new MonoTouch.ObjCRuntime.Selector("onDisconnect:"), this));
        //    }
        //    catch (Exception ex)
        //    {
        //        System.Diagnostics.Debug.WriteLine("Errow while cleaning up video:\n" + ex);
        //    }
        //    if (ViewModel != null) ViewModel.VideoInitCompleted = false;
        //    _service = null;
        //    _scopeId = null;

        //}

        //private void PrepVideoPlatform(Models.VideoChatConfiguration config)
        //{
        //    System.Diagnostics.Debug.WriteLine("PREPARING VIDEO PLATFORM " + config.ScopeId);
        //    if (config == null) return;
        //    if (_currentConfig != null)
        //    {
        //        if (config.ScopeId == _currentConfig.ScopeId) return;
        //    }

        //    System.Diagnostics.Debug.WriteLine("PREPARING VIDEO CHAT FOR MEETING " + config.ScopeId);
        //    _currentConfig = config;
        //    _scopeId = config.ScopeId;
        //    _videoSinksToViews = new Dictionary<string, ALVideoView>();


        //    var height = 230f;
        //    var width = 230f;
        //    var margin = 10f;

        //    _remoteVideoView = new ALVideoView();
        //    _remoteVideoView.Frame = new RectangleF(margin, margin, width, height);
        //    _remoteVideoView.BackgroundColor = UIColor.White;
        //    this.View.AddSubview(_remoteVideoView);
        //    _remoteVideoView.Resume();

        //    _localVideoView = new ALVideoView();
        //    _localVideoView.Frame = new RectangleF(margin, margin + height + margin, width, height);
        //    _localVideoView.BackgroundColor = UIColor.White;
        //    this.View.AddSubview(_localVideoView);
        //    _localVideoView.Resume();

        //    _reverseCameraButton = new UIButton(UIButtonType.Custom);
        //    _reverseCameraButton.Frame = new RectangleF(margin, margin * 3 + height * 2, 60f, 48f);
        //    _reverseCameraButton.SetBackgroundImage(UIImage.FromFile("reverse_camera.png"), UIControlState.Normal);
        //    _reverseCameraButton.TouchUpInside += HandleReverserCamera;
        //    this.View.AddSubview(_reverseCameraButton);

        //    _service = new ALService(config.AppId, config.ApiKey);

        //    var options = new ALInitOptions();
        //    var responder = new ALResponder(new MonoTouch.ObjCRuntime.Selector("onInitPlatform:"), this);

        //    _service.InitPlatform(options, responder);
        //}

        //[Export("onStopLocalVideoForRestart:")]
        //public void onStopLocalVideoForRestart(ALError error)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.onStopLocalVideoForRestart:");

        //    _currentDevice++;
        //    _currentDevice = _currentDevice % _cameraDevices.Length;

        //    var cameraDevice = (ALDevice)_cameraDevices.GetValue(_currentDevice);
        //    _service.SetVideoCaptureDevice(cameraDevice.Id,
        //                                   new ALResponder(new MonoTouch.ObjCRuntime.Selector("onSetVideoCaptureDevice:"), this));
        //    _service.StartLocalVideo(new ALResponder(new MonoTouch.ObjCRuntime.Selector("onRestartLocalVideo:videoSinkId:"), this));
        //}

        //private void HandleReverserCamera(object sender, EventArgs e)
        //{
        //    _service.StopLocalVideo(new ALResponder(new MonoTouch.ObjCRuntime.Selector("onStopLocalVideoForRestart:"), this));
        //}

        //public void UserEvent(ALUserStateChangedEvent evt)
        //{
        //    System.Diagnostics.Debug.WriteLine("VideoConferenceViewController.UserEvent");

        //    if (evt == null) return;
        //    if (_videoSinksToViews == null) return;
        //    if (evt.IsConnected) {
        //        _videoSinksToViews[evt.VideoSinkId] = _remoteVideoView;
        //        _remoteVideoView.AddRenderer(evt.VideoSinkId);
        //    }
        //}
        //public void VideoFrameSizeChanged(ALVideoFrameSizeChangedEvent evt) {
        //    System.Diagnostics.Debug.WriteLine ("VideoConferenceViewController.VideoFrameSizeChanged");

        //    if (evt == null) return;

        //    if (!_videoSinksToViews.ContainsKey(evt.SinkId)) return;

        //    ALVideoView videoView = _videoSinksToViews[evt.SinkId];
        //    if (videoView == null) return;

        //    videoView.ResolutionChanged(evt.Width, evt.Height);
        //}

  //      #endregion

      //  #region Overrides

        //public override void ViewDidLoad()
        //{
        //    // Rx for ViewModel and Config
        //    this.WhenAnyValue(vm => vm.ViewModel)
        //        .Subscribe(vm => this.ViewModel = vm);

        //    this.WhenAnyValue(vm => vm.ViewModel.Config)
        //        .Where(config => config != null)
        //        .Subscribe(config => PrepVideoPlatform(config));

        //    this.WhenAnyValue(vm => vm.ViewModel.Config)
        //        .Where(config => config == null)
        //        .Subscribe(_ => Disconnect());
        //}
//
     //   #endregion

      //  #region Properties

        object IViewFor.ViewModel
        {
            get { return ViewModel; }
            set { ViewModel = (VideoConfViewModel)value; }
        }
        public VideoConfViewModel ViewModel
        {
            get { return _viewModel; }
            set { RaiseAndSetIfChanged(ref _viewModel, value); }
        }

       // #endregion
    }
}